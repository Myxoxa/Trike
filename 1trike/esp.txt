#define HOVER_SERIAL_BAUD   115200       // [-] Baud rate for HoverSerial (used to communicate with the hoverboard)
#define SERIAL_BAUD         115200      // [-] Baud rate for built-in Serial (used for the Serial Monitor)
#define START_FRAME         0xABCD       // [-] Start frme definition for reliable serial communication

#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <SoftwareSerial.h>
#define joyY A0
//#define WIFI_server
#define WIFI_client 

//wifi
const char* ssid = "sasacart";
const char* password = "12345678";
IPAddress local_IP(192,168,1,2);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);

int currentSpeed=0;
int currentSteer=0;
int wantedSpeed=0;
int wantedSteer=0;

int fullAcceleration=0;
int allowDisconnect=0;

int manualControl=0;
int gear=30;
int changeSpeed=0;
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(

HTML HERE

)rawliteral";

//usart
SoftwareSerial HoverSerial(5,14);        // RX, TX d5 d1
uint8_t idx = 0;                        // Index for new data pointer
uint16_t bufStartFrame;                 // Buffer Start Frame
byte *p;                                // Pointer declaration for the new received data
byte incomingByte;
byte incomingBytePrev;

typedef struct{
   uint16_t start;
   int16_t  steer;
   int16_t  speed;
   uint16_t checksum;
} SerialCommand;
SerialCommand Command;

typedef struct{
   uint16_t start;
   int16_t  cmd1;
   int16_t  cmd2;
   int16_t  speedR_meas;
   int16_t  speedL_meas;
   int16_t  batVoltage;
   int16_t  boardTemp;
   uint16_t cmdLed;
   uint16_t checksum;
} SerialFeedback;
SerialFeedback Feedback;
SerialFeedback NewFeedback;

void setup(){
  pinMode(15, INPUT);  //d8 joybtn
  // Serial port for debugging purposes
  Serial.begin(115200);
  HoverSerial.begin(115200);
  
 #ifdef WIFI_server
    WiFi.mode(WIFI_AP);
    WiFi.softAP(ssid, password); 
    WiFi.softAPConfig(local_IP, gateway, subnet);
    delay(1000);
 #endif
 
 #ifdef WIFI_client
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi..");
    }
    // Print ESP Local IP Address
    Serial.println(WiFi.localIP());
 #endif

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  // Send a GET request to <ESP_IP>/update?output=<inputMessage1>&state=<inputMessage2>
  server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage1;
    String inputMessage2;
    // GET input1 value on <ESP_IP>/update?output=<inputMessage1>&state=<inputMessage2>
    if (request->hasParam("XX") && manualControl==0) {
      inputMessage1 = request->getParam("XX")->value();
      inputMessage2 = request->getParam("YY")->value();
      wantedSteer=inputMessage1.toInt()*4*gear;
      wantedSpeed=inputMessage2.toInt()*-4*gear; 
    }
    else if (request->hasParam("state")) {
      inputMessage1 = "1 = manual. 0 = wifi|  state: ";
      inputMessage2 = request->getParam("state")->value();
      manualControl=inputMessage2.toInt();   
    }
    else if (request->hasParam("fullacceleraton")) {
      inputMessage1 = "0 = redtricted. 1 = full|  state: ";
      inputMessage2 = request->getParam("fullacceleraton")->value();
      fullAcceleration=inputMessage2.toInt();
    }
    else if (request->hasParam("allowdisconnect")) {
      inputMessage1 = "0 = redtricted. 1 = full|  state: ";
      inputMessage2 = request->getParam("allowdisconnect")->value();
      allowDisconnect=inputMessage2.toInt();
    }
    else if (request->hasParam("gear")) {
      inputMessage1 = "gear ";
      inputMessage2 = request->getParam("gear")->value();
      gear=inputMessage2.toInt();
    }
    else {
      inputMessage1 = "No message sent";
      inputMessage2 = "No message sent";
    }
    String callBack="Speed="+String(currentSpeed/100)+" Gear="+String(gear);
    request->send(200, "text/plain", callBack);
  });

  // Start server
  server.begin();
}

void Send(int16_t uSteer, int16_t uSpeed) {
  // Create command
  Command.start    = (uint16_t)START_FRAME;
  Command.steer    = (int16_t)uSteer;
  Command.speed    = (int16_t)uSpeed;
  Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);

  // Write to Serial
  HoverSerial.write((uint8_t *) &Command, sizeof(Command));
}

void Receive() {
    // Check for new data availability in the Serial buffer
    if (HoverSerial.available()) {
        incomingByte    = HoverSerial.read();                                   // Read the incoming byte
        bufStartFrame = ((uint16_t)(incomingByte) << 8) | incomingBytePrev;       // Construct the start frame
    }
    else {
        return;
    }
    // Copy received data
    if (bufStartFrame == START_FRAME) {                     // Initialize if new data is detected
        p       = (byte *)&NewFeedback;
        *p++    = incomingBytePrev;
        *p++    = incomingByte;
        idx     = 2;  
    } else if (idx >= 2 && idx < sizeof(SerialFeedback)) {  // Save the new received data
        *p++    = incomingByte; 
        idx++;
    } 
    
    // Check if we reached the end of the package
    if (idx == sizeof(SerialFeedback)) {
        uint16_t checksum;
        checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback.speedR_meas ^ NewFeedback.speedL_meas
                            ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);

        // Check validity of the new data
        if (NewFeedback.start == START_FRAME && checksum == NewFeedback.checksum) {
            // Copy the new data
            memcpy(&Feedback, &NewFeedback, sizeof(SerialFeedback));

            // Print data to built-in Serial
            Serial.print("cmd1: ");   Serial.print(Feedback.cmd1);
            Serial.print(" cmd2: ");  Serial.print(Feedback.cmd2);
            Serial.print(" rightSpeed: ");  Serial.print(Feedback.speedR_meas);
            Serial.print(" leftSpeed: ");  Serial.print(Feedback.speedL_meas);
            Serial.print(" batVoltage: ");  Serial.print(Feedback.batVoltage);
            Serial.print(" temp: ");  Serial.print(Feedback.boardTemp);
            Serial.print(" cmdled: ");  Serial.println(Feedback.cmdLed);
        } else {
          Serial.println("Non-valid data skipped");
        }
        idx = 0;    // Reset the index (it prevents to enter in this if condition in the next cycle)
    }

    // Update previous states
    incomingBytePrev = incomingByte;
}

void loop() {
    unsigned long timeNow = millis();    

  Receive();
    if (manualControl==1) { 
      int analogread=535;
      analogread=analogRead(joyY);
      analogread-=535;
      if (analogread>50) analogread-=50;
      else if (analogread<-50)analogread+=50;
      else analogread=0;
      wantedSpeed=4*round((analogread)/2)*gear;
      wantedSteer=0;
      if (wantedSpeed<-400*gear) wantedSpeed=-400*gear;
    }   

if (allowDisconnect==0) {
     if (WiFi.status() != WL_CONNECTED) {
        wantedSteer=0;
        wantedSpeed=0;
      }
}

    if (fullAcceleration==1) {
      currentSpeed=wantedSpeed;
      currentSteer=wantedSteer;
    }

    else {      
        if (wantedSpeed>1000*gear) wantedSpeed=1000*gear;
        if (wantedSteer>1000*gear) wantedSteer=1000*gear;
        if (wantedSpeed<-1000*gear) wantedSpeed=-1000*gear;
        if (wantedSteer<-1000*gear) wantedSteer=-1000*gear;    

      if (abs(wantedSpeed)<10) wantedSpeed=0;
      if (abs(wantedSteer)<10) wantedSteer=0;
      
      if (wantedSpeed>currentSpeed+60*gear) currentSpeed+=60*gear;
      else if (wantedSpeed<currentSpeed-90*gear) {
        if (wantedSpeed<50) currentSpeed-=150*gear;
        else currentSpeed-=90*gear;
      }
      else currentSpeed=wantedSpeed;
      if (wantedSteer>currentSteer+50*gear) currentSteer+=50*gear;
      else if (wantedSteer<currentSteer-50*gear) currentSteer-=50*gear;
      else currentSteer=wantedSteer;
    }
    if (abs(currentSpeed)<10) currentSpeed=0;
    if (abs(currentSteer)<10) currentSteer=0;

    
   
  Send(currentSteer/100, currentSpeed/100);
  delay(100);
}